{
  "active": false,
  "connections": {
    "Create a Conversation": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Wait For Create a Conversation1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open a Conversation": {
      "main": [
        [
          {
            "node": "Set Updated Conversation Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Not Broadcast ?": {
      "main": [
        [
          {
            "node": "Extra",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Broadcast Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "If Single Thread ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Filter Conversation Parameters": {
      "main": [
        [
          {
            "node": "#region retries for conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Empty Conversation ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait For Create a Conversation1": {
      "main": [
        [
          {
            "node": "Conversation Is Not Open ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Updated Conversation Status": {
      "main": [
        [
          {
            "node": "Merge Conversation Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Payload Constants": {
      "main": [
        [
          {
            "node": "Execute Workflow Post To Chatwoot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Call Request ?": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Not In Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Text Content For Call Request": {
      "main": [
        [
          {
            "node": "Follow to Chatwoot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Increment For Conversations Attempts": {
      "main": [
        [
          {
            "node": "Max Attempts Reached ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait a while (5s) For Conversation": {
      "main": [
        [
          {
            "node": "#region retries for conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Conversation Payload": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Chatwoot Message Payload": {
      "main": [
        [
          {
            "node": "Payload Constants",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Last Conversation": {
      "main": [
        [
          {
            "node": "Rename Status Enum",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rename Status Enum": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If Single Thread ?": {
      "main": [
        [
          {
            "node": "first found",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Not Resolved Conversation Found ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Max Attempts Reached ?": {
      "main": [
        [
          {
            "node": "CleanUp Invalid Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait a while (5s) For Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Not Resolved Conversation Found ?": {
      "main": [
        [
          {
            "node": "first found",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Increment For Conversations Attempts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "#region retries for conversation": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Last Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "first found": {
      "main": [
        [
          {
            "node": "Set Conversation Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CleanUp Invalid Status": {
      "main": [
        [
          {
            "node": "Set Conversation Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Throw Get Chatwoot Contacts Workflow": {
      "main": [
        [
          {
            "node": "If Success To Get Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Not In Reply": {
      "main": [
        [
          {
            "node": "Follow to Chatwoot",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Has Hiffen",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merging Found Id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow to Chatwoot": {
      "main": [
        [
          {
            "node": "Chatwoot Message Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get In Reply Reference Id": {
      "main": [
        [
          {
            "node": "Merging Found Id",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merging Found Id": {
      "main": [
        [
          {
            "node": "If Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set1": {
      "main": [
        [
          {
            "node": "Follow to Chatwoot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Has Hiffen": {
      "main": [
        [
          {
            "node": "Set Internal Id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get In Reply Reference Id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Internal Id": {
      "main": [
        [
          {
            "node": "Merging Found Id",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If Not Found": {
      "main": [
        [
          {
            "node": "Follow to Chatwoot",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Not Revoked ?": {
      "main": [
        [
          {
            "node": "If Chat Control",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "(In) Revoked Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "(In) Revoked Message": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          },
          {
            "node": "If Sended By Chatwoot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Retrieved Chatwoot Revoked Info": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Send Revoked Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Revoked Message Info": {
      "main": [
        [
          {
            "node": "Set Retrieved Chatwoot Revoked Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Sended By Chatwoot": {
      "main": [
        [
          {
            "node": "Get Internal Id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Revoked Message Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Revoked Internal Message Info": {
      "main": [
        [
          {
            "node": "Set Retrieved Chatwoot Revoked Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Internal Id": {
      "main": [
        [
          {
            "node": "Get Revoked Internal Message Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Success To Get Contact": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Filter Conversation Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Defaults": {
      "main": [
        [
          {
            "node": "If Not Revoked ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extra": {
      "main": [
        [
          {
            "node": "Defaults",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          },
          {
            "node": "Throw To WebCallBack Telephony Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "MsgRejectCall",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Set Text Content For Call Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Is Not Open ?": {
      "main": [
        [
          {
            "node": "Should Open Conversation ?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Call Request ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Open Conversation ?": {
      "main": [
        [
          {
            "node": "Merge Conversation Status",
            "type": "main",
            "index": 1
          },
          {
            "node": "Open a Conversation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Conversation Opened",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty Conversation ?": {
      "main": [
        [
          {
            "node": "Should Create a New Conversation ?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Conversation Is Not Open ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Create a New Conversation ?": {
      "main": [
        [
          {
            "node": "Create a Conversation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait For Create a Conversation1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If Chat Control": {
      "main": [
        [
          {
            "node": "Throw To Quepasa Chat Control Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Throw Get Chatwoot Contacts Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Conversation Status": {
      "main": [
        [
          {
            "node": "Wait For SHIT ChatWoot API process internal things",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait For SHIT ChatWoot API process internal things": {
      "main": [
        [
          {
            "node": "Conversation Opened",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Opened": {
      "main": [
        [
          {
            "node": "If Call Request ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Not Implemented ?": {
      "main": [
        [
          {
            "node": "Edited Contact (Not Implemented)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not Broadcast ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Throw To WebCallBack Telephony Workflow": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Chatwoot": {
      "main": [
        [
          {
            "node": "Not Implemented ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-09T01:03:21.122Z",
  "id": "1009",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2b4ab318d4f8eba20155e50db9998481bc305e3588e42ee69176091736c9d07e"
  },
  "name": "QuepasaToChatwoot",
  "nodes": [
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$json[\"extra\"][\"cwhost\"]}}/api/v1/accounts/{{$json[\"extra\"][\"account\"]}}/conversations",
        "allowUnauthorizedCerts": true,
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "status",
              "value": "open"
            },
            {
              "name": "inbox_id",
              "value": "={{$json[\"extra\"][\"inbox\"]}}"
            },
            {
              "name": "contact_id",
              "value": "={{$json.chat.chatwoot.id}}"
            }
          ]
        },
        "headerParametersUi": {
          "parameter": [
            {
              "name": "api_access_token",
              "value": "={{$json[\"extra\"][\"atoken\"]}}"
            }
          ]
        }
      },
      "name": "Create a Conversation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        6540,
        960
      ],
      "id": "95e8ec77-d73c-4bb6-a71c-c05d54e2562d",
      "retryOnFail": true,
      "notes": "Important to use \"source_id\" to respond messages"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "conversation.id",
              "value": "={{$json.id}}"
            },
            {
              "name": "conversation.status",
              "value": "={{$json.status}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        6740,
        960
      ],
      "id": "a20bf7f9-8208-4d57-977a-680b36186f8d"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$json[\"extra\"][\"cwhost\"]}}/api/v1/accounts/{{$json[\"extra\"][\"account\"]}}/conversations/{{$json[\"conversation\"][\"id\"]}}/toggle_status",
        "allowUnauthorizedCerts": true,
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "status",
              "value": "open"
            }
          ]
        },
        "headerParametersUi": {
          "parameter": [
            {
              "name": "api_access_token",
              "value": "={{$json[\"extra\"][\"atoken\"]}}"
            }
          ]
        }
      },
      "name": "Open a Conversation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        7580,
        980
      ],
      "id": "e1ceb7cc-4341-4d26-bfe9-c46084304c13"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"chat\"][\"id\"].contains(\"@broadcast\") ?? true}}",
              "operation": "notEqual",
              "value2": true
            }
          ]
        }
      },
      "name": "Not Broadcast ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1600,
        1100
      ],
      "id": "1b55c571-3631-4918-b759-f105887f3798"
    },
    {
      "parameters": {
        "mode": "multiplex"
      },
      "name": "Merge3",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        4060,
        1500
      ],
      "id": "880fa4c7-5336-4e9b-9344-c688d33a9012"
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {}
      },
      "id": "377eae59-3e7b-462f-8ff0-ccd7ca10042b",
      "name": "Broadcast Message",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1800,
        1220
      ]
    },
    {
      "parameters": {
        "content": "## Getting and Filtering Conversations\n",
        "height": 616.1278921539156,
        "width": 2110.852343765206
      },
      "id": "e694ed6d-cde6-445c-8f4b-062681465251",
      "name": "Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2960,
        1356.7892681145477
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "extra",
              "value": "={{$json.extra}}"
            },
            {
              "name": "chatid",
              "value": "={{$json.chat.id}}"
            },
            {
              "name": "contactid",
              "value": "={{$json.chat.chatwoot.id}}"
            }
          ],
          "boolean": [
            {
              "name": "singlethread",
              "value": "={{ $json.extra.singlethread ?? /^true$/i.test($env[\"C8Q_SINGLETHREAD\"]) ?? false }}"
            }
          ]
        },
        "options": {}
      },
      "id": "baacbeb9-23ce-4fea-8a1e-093981a2d846",
      "name": "Set Filter Conversation Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        3280,
        1480
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "de949b63-963b-496b-a5ed-e755d92f140d",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        5640,
        1156.7892681145477
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "3309dccf-72ba-491a-8938-554bed97e78d",
      "name": "Wait For Create a Conversation1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        6940,
        1040
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "conversation.status",
              "value": "={{$json.payload.current_status}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set Updated Conversation Status",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        7760,
        980
      ],
      "id": "1b1348b2-cfa2-4afd-86e0-4a72cfba6456"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "payload.content_type",
              "value": "text"
            }
          ]
        },
        "options": {}
      },
      "name": "Payload Constants",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        10920,
        1080
      ],
      "id": "730a71d6-cb01-448b-a5b0-d533b697ac6c"
    },
    {
      "parameters": {
        "workflowId": "={{ $env['C8Q_POSTTOCHATWOOT'] ?? 1006 }}",
        "options": {}
      },
      "id": "576eb6ee-2634-4cbf-957b-86f2e33b9bde",
      "name": "Execute Workflow Post To Chatwoot",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        11120,
        1080
      ],
      "alwaysOutputData": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "content": "## Call Request ?",
        "height": 354.0653279804751,
        "width": 237.27247076935066
      },
      "id": "5f11c626-0660-43eb-a02c-87cfa2939b7a",
      "name": "Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        8400,
        1020
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.type}}",
              "operation": "equal",
              "value2": 8
            }
          ],
          "string": [
            {
              "value1": "={{$json.type}}",
              "value2": "call"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "9ecdeacb-df7d-4178-a6ae-ff2d52755af0",
      "name": "If Call Request ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        8520,
        1197
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "text",
              "value": "={{ $env['C8Q_MSGFOR_CALL_CONTENT'] ?? '\\u2699 O usuário requisitou uma chamada de voz !' }}\n____________________________________________________"
            }
          ],
          "boolean": [
            {
              "name": "payload.private"
            }
          ]
        },
        "options": {}
      },
      "id": "861de7c3-a447-4d62-9869-a6f384c8959a",
      "name": "Set Text Content For Call Request",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        9620,
        1000
      ]
    },
    {
      "parameters": {
        "values": {
          "number": [
            {
              "name": "attempts",
              "value": "={{ ($json.attempts ?? 0) + 1 }}"
            }
          ]
        },
        "options": {}
      },
      "id": "114a20cb-b1ba-428e-9cd1-dfcdfd5ff826",
      "name": "Set Increment For Conversations Attempts",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        4600,
        1660
      ]
    },
    {
      "parameters": {
        "amount": "={{ (Math.random() * 5) + 1 }}",
        "unit": "seconds"
      },
      "id": "2ceae7c9-3e7b-4303-9795-4e2dfd4e8a5e",
      "name": "Wait a while (5s) For Conversation",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        4980,
        1740
      ],
      "webhookId": "13d982e4-e253-4616-9e0a-3da472be5e56"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "conversation.id",
              "value": "={{$json.payload?.id}}"
            },
            {
              "name": "conversation.status",
              "value": "={{$json.payload?.status}}"
            }
          ]
        },
        "options": {}
      },
      "id": "ae8261e7-8e07-4577-acad-5e7ae91cfff4",
      "name": "Set Conversation Payload",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        5140,
        1480
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "payload.content",
              "value": "={{$json.text}}"
            },
            {
              "name": "payload.message_type",
              "value": "={{$json.fromme?\"outgoing\":\"incoming\"}}"
            },
            {
              "name": "payload.source_id",
              "value": "={{$json.id}}"
            },
            {
              "name": "payload.echo_id",
              "value": "={{$json.id}}"
            },
            {
              "name": "payload.content_attributes.items.quepasa.msgid",
              "value": "={{ $json.id }}"
            },
            {
              "name": "payload.content_attributes.in_reply_to",
              "value": "={{ $json.inreply ? +$json.inreply : undefined }}"
            },
            {
              "name": "attachment",
              "value": "={{$json.attachment}}"
            },
            {
              "name": "chatid",
              "value": "={{$json.chat.id}}"
            },
            {
              "name": "chat",
              "value": "={{$json.chat}}"
            },
            {
              "name": "conversation",
              "value": "={{$json.conversation}}"
            },
            {
              "name": "extra",
              "value": "={{$json.extra}}"
            },
            {
              "name": "hex",
              "value": "={{$json.chat.chatwoot.source_id}}"
            },
            {
              "name": "synopsis",
              "value": "={{$json.synopsis}}"
            },
            {
              "name": "participant.title",
              "value": "={{$json.participant?.title}}"
            },
            {
              "name": "participant.phone",
              "value": "={{$json.participant?.phone}}"
            },
            {
              "name": "payload.external_created_at",
              "value": "={{ new Date($json.timestamp).getTime() / 1000 }}"
            },
            {
              "name": "event",
              "value": "={{ $json.type }}"
            }
          ],
          "boolean": [
            {
              "name": "payload.private",
              "value": "={{ $json.payload?.private ?? false }}"
            },
            {
              "name": "payload.edited",
              "value": "={{ $json.edited ?? false }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Chatwoot Message Payload",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        10720,
        1080
      ],
      "id": "c6c73326-7ab9-44b2-8dee-d5a2bc11fb3f"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n display_id, \n status\nFROM conversations \nWHERE \n\taccount_id = '{{ $json.extra.account }}' \n\tAND inbox_id = '{{ $json.extra.inbox }}'\n\tAND contact_id = '{{ $json.contactid }}'\nORDER BY id DESC\nLIMIT 1",
        "additionalFields": {}
      },
      "id": "9d99b392-4c52-47a9-91d8-2dbb25abcacb",
      "name": "Get Last Conversation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        3700,
        1580
      ],
      "retryOnFail": false,
      "waitBetweenTries": 2000,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "5lqPdUQyziPf78q4",
          "name": "Postgres account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const validStatus = [\"open\", \"resolved\", \"pending\", \"snoozed\"];\n\nreturn [{\n  payload: {\n    id: $input.first().json.display_id,\n    status: validStatus[$input.first().json.status]\n  }\n}];"
      },
      "id": "ed446403-04ac-4ad1-8316-fbcf903c76c6",
      "name": "Rename Status Enum",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3880,
        1580
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.singlethread }}",
              "value2": true
            }
          ]
        }
      },
      "id": "54fd5e48-a9a8-4b06-ba5f-16e975adb664",
      "name": "If Single Thread ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4240,
        1500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.attempts ?? 0 }}",
              "operation": "larger",
              "value2": 2
            }
          ]
        }
      },
      "id": "fe7a7e26-637e-4630-854f-e71888b1afbf",
      "name": "Max Attempts Reached ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4780,
        1660
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.payload?.status }}",
              "operation": "notEqual",
              "value2": "resolved"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "11005f85-b457-4e52-ab77-e04902de6878",
      "name": "If Not Resolved Conversation Found ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4420,
        1580
      ]
    },
    {
      "parameters": {},
      "id": "27fa6baa-0b5b-4c49-a6b7-5de2ae4ee024",
      "name": "#region retries for conversation",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3520,
        1480
      ]
    },
    {
      "parameters": {},
      "id": "29fbc061-b63b-457c-9cf0-f93e4d6aa40d",
      "name": "first found",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4600,
        1480
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "options": {}
      },
      "id": "006b04b5-a186-4d40-ab8f-0eec11897dd3",
      "name": "CleanUp Invalid Status",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        4980,
        1580
      ]
    },
    {
      "parameters": {
        "content": "## (1.0.20) Updates\n* adjusting conversation status\n\n## Recommendations \n* Remember set timeout to 30 seconds",
        "height": 200.52521040961017,
        "width": 569.6036185132486
      },
      "id": "359a1940-4749-43a9-8ebe-f9170a98d821",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        980,
        580
      ]
    },
    {
      "parameters": {
        "workflowId": "={{ $env['C8Q_GETCHATWOOTCONTACTS'] ?? 1002 }}",
        "options": {}
      },
      "id": "e303e63f-ec1d-4233-a5f8-ccb35874738c",
      "name": "Throw Get Chatwoot Contacts Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        2540,
        1160
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.inreply }}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "id": "a200eaf6-d197-4f61-8964-9de0b5e508a4",
      "name": "If Not In Reply",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        8780,
        1357
      ]
    },
    {
      "parameters": {},
      "id": "547018b5-d942-4d7c-b254-445d2245adf1",
      "name": "Follow to Chatwoot",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        10520,
        1077
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=\nSELECT id AS inreply_internal_id\nFROM messages \nWHERE source_id = '{{ $json.inreply }}'\nLIMIT 1",
        "options": {}
      },
      "id": "ade67cb9-2c0c-4956-94ef-b45c4ef4411d",
      "name": "Get In Reply Reference Id",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        9180,
        1597
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "5lqPdUQyziPf78q4",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "11745fd5-6a49-4952-a7ab-78fca54b7764",
      "name": "Merging Found Id",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        9420,
        1397
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "inreply",
              "value": "={{ $json.inreply_internal_id }}"
            },
            {
              "name": "synopsis",
              "value": "={{ undefined }}"
            }
          ]
        },
        "options": {}
      },
      "id": "27c5a931-f147-4caa-9e00-4af23cd04fd6",
      "name": "Set1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        9800,
        1417
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.inreply }}",
              "operation": "contains",
              "value2": "-"
            }
          ]
        }
      },
      "id": "c4d05427-5106-4109-b100-55bab9e78869",
      "name": "If Has Hiffen",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        8980,
        1477
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "inreply_internal_id",
              "value": "={{ $json.inreply.split(/-/).pop() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "4d4d0ccb-36c1-4ccc-932e-8cfb8e264596",
      "name": "Set Internal Id",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        9180,
        1457
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.inreply_internal_id }}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "id": "0679def0-c0ac-4a0f-a77e-5f7061a458fb",
      "name": "If Not Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        9600,
        1397
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.body.type }}",
              "operation": "notEqual",
              "value2": 10
            }
          ],
          "string": [
            {
              "value1": "={{ $json.body.type }}",
              "operation": "notEqual",
              "value2": "revoke"
            }
          ]
        }
      },
      "id": "8cc3009b-c37c-4d98-b562-198c5c911199",
      "name": "If Not Revoked ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2120,
        1080
      ]
    },
    {
      "parameters": {},
      "id": "e2800c08-0916-448c-9766-87d795ddde56",
      "name": "(In) Revoked Message",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3360,
        2440
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "revoked",
              "value": "={{ $json }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e950d790-7eff-4d49-8aa5-60e90f29cebf",
      "name": "Set Retrieved Chatwoot Revoked Info",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        4180,
        2240
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "2acc23b6-335e-4961-8ed2-30a9b5a3e39d",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        4500,
        2420
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.extra.cwhost }}/api/v1/accounts/{{ $json.revoked.account_id }}/conversations/{{ $json.revoked.conversation_id }}/messages",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n   \"private\": false,\n   \"content\": \"{{ $env['C8Q_MSGFOR_REVOKED_CONTENT'] ?? '\\u274C Essa mensagem foi apagada !!!' }}\",\n   \"message_type\": 2,\n   \"content_attributes\": {      \n      \"in_reply_to\": {{ +$json.revoked.id }},\n      \"in_reply_to_external_id\": \"{{ $json.body.id }}\"\n   },\n   \"content_type\": \"text\"\n}",
        "headerParametersJson": "={ \"api_access_token\": \"{{ $json.extra.atoken }}\" }"
      },
      "name": "Send Revoked Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        4720,
        2420
      ],
      "id": "3a6b1b43-c335-4310-826e-fb452a491256",
      "retryOnFail": true,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "content": "## Message Revoked From Source\n\n",
        "height": 511.52099560219085,
        "width": 1735.9412743995279
      },
      "id": "054674da-2ce0-4464-8760-efdfc6ea053a",
      "name": "Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2960,
        2080
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT messages.account_id, conversations.display_id as conversation_id, messages.id\nFROM messages INNER JOIN conversations \nON messages.conversation_id = conversations.id\nWHERE messages.account_id = '{{ $json.extra.account }}' AND messages.source_id = '{{ $json.body.id }}';",
        "options": {}
      },
      "id": "89395090-65dd-46ba-b51a-f29025dbdc73",
      "name": "Get Revoked Message Info",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3960,
        2360
      ],
      "credentials": {
        "postgres": {
          "id": "5lqPdUQyziPf78q4",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{  $json.body.id }}",
              "operation": "contains",
              "value2": "-"
            }
          ]
        }
      },
      "id": "2b339901-31b2-401f-8769-5710e8dc39cc",
      "name": "If Sended By Chatwoot",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3560,
        2340
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT messages.account_id, conversations.display_id as conversation_id, messages.id\nFROM messages INNER JOIN conversations \nON messages.conversation_id = conversations.id\nWHERE messages.account_id = '{{ $json.extra.account }}' AND messages.id = '{{ $json.internalid }}';",
        "options": {}
      },
      "id": "026cb11e-4cc1-4f4f-aef1-5970f272df48",
      "name": "Get Revoked Internal Message Info",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3960,
        2120
      ],
      "credentials": {
        "postgres": {
          "id": "5lqPdUQyziPf78q4",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function isNumeric(str) {\n  if (typeof str != \"string\") return false;\n  return !isNaN(str) && !isNaN(parseFloat(str));\n}\nconst splitted = $input.item.json.body.id.split(/-/);\nlet internalid = splitted.pop();\nif (!isNumeric(internalid)){\n  internalid = splitted[2];\n}\n\n$input.item.json.internalid = internalid;\nreturn $input.item;"
      },
      "id": "412d00b0-28ba-437b-b28b-62c7cf289b73",
      "name": "Get Internal Id",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3760,
        2220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.error }}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "id": "4e42ae90-f1bf-41a8-bd7e-22cfa02f7ced",
      "name": "If Success To Get Contact",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2720,
        1160
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "extra.cwhost",
              "value": "={{ $env[\"C8Q_CW_HOST\"] }}"
            },
            {
              "name": "params",
              "value": "={{undefined}}"
            },
            {
              "name": "headers",
              "value": "={{undefined}}"
            },
            {
              "name": "query",
              "value": "={{undefined}}"
            },
            {
              "name": "extra.qphost",
              "value": "={{ $env[\"C8Q_QUEPASA_HOST\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "18e94a59-4ce7-48b1-a8b7-6a0eced2ce46",
      "name": "Defaults",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        1960,
        1080
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "extra",
              "value": "={{ $json.extra ?? $json.body.extra }}"
            },
            {
              "name": "body.extra",
              "value": "={{ undefined }}"
            }
          ]
        },
        "options": {}
      },
      "id": "aff9da47-a46a-4f39-98d1-390a891c45c8",
      "name": "Extra",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        1800,
        1080
      ]
    },
    {
      "parameters": {},
      "id": "d24f284a-45aa-4c07-8132-9097f7eb85f2",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        8780,
        1020
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "47a0c6fc-8076-4771-b019-2e2099515404",
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        9400,
        1000
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f0bf29cd-f9a3-4ad3-b4a7-bfd3ce4b255c",
              "leftValue": "={{$json.conversation.status}}",
              "rightValue": "=open",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1798a9d4-b608-4dba-921e-b5a41494ecc2",
      "name": "Conversation Is Not Open ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        7180,
        1180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "915f6870-811a-493e-b1c8-2631f16463c3",
              "leftValue": "={{ $json.extra.soc }}",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "680dd644-57ca-4729-8d80-a24c830584f8",
              "leftValue": "={{ $json.extra.soc }}",
              "rightValue": "=",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": true,
          "looseTypeValidation": true
        }
      },
      "id": "592ca21e-9f32-45cd-a518-264e80433328",
      "name": "Should Open Conversation ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        7380,
        1080
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.conversation?.id}}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "name": "Empty Conversation ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        6140,
        1160
      ],
      "alwaysOutputData": false,
      "id": "db9b4dc4-4f99-420d-a5fa-31cbf194e5b9"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "848dd55e-3034-4e40-96ba-b35f5a814cfd",
              "leftValue": "={{ $json.chat?.chatwoot?.skipcontact ?? false }}",
              "rightValue": "=",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4ded69f7-8676-41d5-88ef-319fb90d9b39",
      "name": "Should Create a New Conversation ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        6340,
        1060
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body.chat.id }}",
              "value2": "system"
            },
            {
              "value1": "={{ $json.body.text }}",
              "operation": "regex",
              "value2": "^\\/api|^\\/\\/|^\\/invite[\\s]*?$"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "4d3d7865-ea30-4119-9bb6-7099b4b6f2a4",
      "name": "If Chat Control",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2340,
        1060
      ]
    },
    {
      "parameters": {
        "workflowId": "={{ $env['C8Q_QUEPASACHATCONTROL'] ?? 1003 }}",
        "options": {}
      },
      "id": "937991f1-6aeb-4737-bb8c-f4e369abf5e4",
      "name": "Throw To Quepasa Chat Control Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        2540,
        940
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferInput1"
            }
          }
        }
      },
      "id": "4ac1af68-bc55-48eb-9a7f-c950435d73fd",
      "name": "Merge Conversation Status",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        7960,
        1040
      ]
    },
    {
      "parameters": {
        "amount": 1
      },
      "id": "a8367cec-8c95-4259-b787-71e73e2319f0",
      "name": "Wait For SHIT ChatWoot API process internal things",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        8140,
        1040
      ],
      "webhookId": "2bd8aead-fb32-4bad-b0da-cf93d85285fd"
    },
    {
      "parameters": {},
      "id": "31048201-2a7a-4695-9b57-379f4a76308e",
      "name": "Conversation Opened",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        8340,
        1100
      ]
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 200
        }
      },
      "id": "3f3c5c29-396e-4aa1-9b23-2910c32c829c",
      "name": "Edited Contact (Not Implemented)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1560,
        880
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "510fae79-4d90-4ddd-93a4-4201cba493a1",
              "leftValue": "={{ $json.body.type }}",
              "rightValue": "contact",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "0b649b71-4626-47f6-a483-36a505f13c86",
              "leftValue": "={{ $json.body.edited }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "88bdbed7-e5be-4106-9d9b-b7a86f3376c4",
      "name": "Not Implemented ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1320,
        1100
      ]
    },
    {
      "parameters": {
        "workflowId": "={{ $env['C8Q_POSTTOWEBCALLBACK'] ?? 1005 }}",
        "options": {}
      },
      "id": "a0a76038-9c67-49d7-a5cf-7165f051704b",
      "name": "Throw To WebCallBack Telephony Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        9080,
        860
      ],
      "executeOnce": true,
      "disabled": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env[\"C8Q_N8N_WEBHOOK\"] }}/webhook/reject-call",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "extra.qphost",
              "value": "={{ $json.extra.qphost }}"
            },
            {
              "name": "extra.identifier",
              "value": "={{ $json.extra.identifier }}"
            },
            {
              "name": "extra.account",
              "value": "={{ $json.extra.account }}"
            },
            {
              "name": "extra.atoken",
              "value": "={{ $json.extra.atoken }}"
            },
            {
              "name": "extra.utoken",
              "value": "={{ $json.extra.utoken }}"
            },
            {
              "name": "extra.cwhots",
              "value": "={{ $json.extra.cwhost }}"
            },
            {
              "name": "chat.title",
              "value": "={{ $json.chat.title }}"
            },
            {
              "name": "chat.id",
              "value": "={{ $json.chat.id }}"
            },
            {
              "name": "chat.phone",
              "value": "={{ $json.chat.phone }}"
            },
            {
              "name": "conversation.id",
              "value": "={{ $json.conversation.id }}"
            },
            {
              "name": "conversation.status",
              "value": "={{ $json.conversation.status }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e203a5f2-2eab-442f-b002-e65dd429d010",
      "name": "MsgRejectCall",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        9080,
        700
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "to-chatwoot",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "43b9e419-eae9-4584-ab3f-73de35b578cd",
      "name": "Webhook Chatwoot",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        780,
        820
      ],
      "webhookId": "f0d0e1da-e8cf-4956-8715-dccf5fe3c892"
    },
    {
      "parameters": {
        "queue": "n8n_qpassa",
        "options": {
          "arguments": {
            "argument": [
              {
                "key": "x-queue-type",
                "value": "quorum"
              }
            ]
          },
          "durable": true
        }
      },
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1.1,
      "position": [
        1260,
        1680
      ],
      "id": "5b2a1f8b-470b-4368-961c-1d05c2365d0e",
      "name": "RabbitMQ1",
      "credentials": {
        "rabbitmq": {
          "id": "HjGPIIV4bZRl1xOG",
          "name": "RabbitMQ account"
        }
      },
      "disabled": true
    }
  ],
  "pinData": {},
  "settings": {
    "saveManualExecutions": false,
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 30,
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2023-05-19T22:54:38.266Z",
      "updatedAt": "2023-05-19T22:54:38.266Z",
      "id": "13",
      "name": "github.com/nocodeleaks"
    },
    {
      "createdAt": "2024-05-24T01:34:15.401Z",
      "updatedAt": "2024-05-24T01:34:15.401Z",
      "id": "PHDp1yoMiVikbrb2",
      "name": "chatwoot"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-27T22:54:19.090Z",
  "versionId": "500ab889-52ac-4363-97ee-79b0abad1ba6"
}